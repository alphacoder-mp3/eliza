services:
    postgres:
        image: postgres:15
        environment:
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_DB=eliza
        volumes:
            - postgres-data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        restart: always

    eliza:
        build:
            context: .
            dockerfile: Dockerfile
        volumes:
            - /var/run/tappd.sock:/var/run/tappd.sock
        environment:
            - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
            - SERVER_PORT=${SERVER_PORT}
            - OPENAI_API_KEY=${OPENAI_API_KEY}
            - SOCIAL_MEDIA_MANAGER_DISCORD_APPLICATION_ID=${SOCIAL_MEDIA_MANAGER_DISCORD_APPLICATION_ID}
            - SOCIAL_MEDIA_MANAGER_DISCORD_API_TOKEN=${SOCIAL_MEDIA_MANAGER_DISCORD_API_TOKEN}
            - LIAISON_DISCORD_APPLICATION_ID=${LIAISON_DISCORD_APPLICATION_ID}
            - LIAISON_DISCORD_API_TOKEN=${LIAISON_DISCORD_API_TOKEN}
            - INVESTMENT_MANAGER_DISCORD_APPLICATION_ID=${INVESTMENT_MANAGER_DISCORD_APPLICATION_ID}
            - INVESTMENT_MANAGER_DISCORD_API_TOKEN=${INVESTMENT_MANAGER_DISCORD_API_TOKEN}
            - PROJECT_MANAGER_DISCORD_APPLICATION_ID=${PROJECT_MANAGER_DISCORD_APPLICATION_ID}
            - PROJECT_MANAGER_DISCORD_API_TOKEN=${PROJECT_MANAGER_DISCORD_API_TOKEN}
            - DEV_SUPPORT_DISCORD_APPLICATION_ID=${DEV_SUPPORT_DISCORD_APPLICATION_ID}
            - DEV_SUPPORT_DISCORD_API_TOKEN=${DEV_SUPPORT_DISCORD_API_TOKEN}
            - COMMUNITY_MANAGER_DISCORD_APPLICATION_ID=${COMMUNITY_MANAGER_DISCORD_APPLICATION_ID}
            - COMMUNITY_MANAGER_DISCORD_API_TOKEN=${COMMUNITY_MANAGER_DISCORD_API_TOKEN}
            - BIRDEYE_API_KEY=${BIRDEYE_API_KEY}
            - POSTGRES_URL=${POSTGRES_URL}
        ports:
            - "3000:3000"
            - "5173:5173"
        depends_on:
            postgres:
                condition: service_healthy
        restart: always

volumes:
    postgres-data:
